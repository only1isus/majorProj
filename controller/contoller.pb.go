// Code generated by protoc-gen-go. DO NOT EDIT.
// source: contoller.proto

package controller

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SensorData struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Key                  []byte   `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorData) Reset()         { *m = SensorData{} }
func (m *SensorData) String() string { return proto.CompactTextString(m) }
func (*SensorData) ProtoMessage()    {}
func (*SensorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3b2e6a609531fe5, []int{0}
}

func (m *SensorData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorData.Unmarshal(m, b)
}
func (m *SensorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorData.Marshal(b, m, deterministic)
}
func (m *SensorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorData.Merge(m, src)
}
func (m *SensorData) XXX_Size() int {
	return xxx_messageInfo_SensorData.Size(m)
}
func (m *SensorData) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorData.DiscardUnknown(m)
}

var xxx_messageInfo_SensorData proto.InternalMessageInfo

func (m *SensorData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SensorData) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type SuccessResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuccessResponse) Reset()         { *m = SuccessResponse{} }
func (m *SuccessResponse) String() string { return proto.CompactTextString(m) }
func (*SuccessResponse) ProtoMessage()    {}
func (*SuccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3b2e6a609531fe5, []int{1}
}

func (m *SuccessResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuccessResponse.Unmarshal(m, b)
}
func (m *SuccessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuccessResponse.Marshal(b, m, deterministic)
}
func (m *SuccessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuccessResponse.Merge(m, src)
}
func (m *SuccessResponse) XXX_Size() int {
	return xxx_messageInfo_SuccessResponse.Size(m)
}
func (m *SuccessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SuccessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SuccessResponse proto.InternalMessageInfo

func (m *SuccessResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type LogData struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Key                  []byte   `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogData) Reset()         { *m = LogData{} }
func (m *LogData) String() string { return proto.CompactTextString(m) }
func (*LogData) ProtoMessage()    {}
func (*LogData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3b2e6a609531fe5, []int{2}
}

func (m *LogData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogData.Unmarshal(m, b)
}
func (m *LogData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogData.Marshal(b, m, deterministic)
}
func (m *LogData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogData.Merge(m, src)
}
func (m *LogData) XXX_Size() int {
	return xxx_messageInfo_LogData.Size(m)
}
func (m *LogData) XXX_DiscardUnknown() {
	xxx_messageInfo_LogData.DiscardUnknown(m)
}

var xxx_messageInfo_LogData proto.InternalMessageInfo

func (m *LogData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LogData) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func init() {
	proto.RegisterType((*SensorData)(nil), "controller.sensorData")
	proto.RegisterType((*SuccessResponse)(nil), "controller.successResponse")
	proto.RegisterType((*LogData)(nil), "controller.logData")
}

func init() { proto.RegisterFile("contoller.proto", fileDescriptor_c3b2e6a609531fe5) }

var fileDescriptor_c3b2e6a609531fe5 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xce, 0xcf, 0x2b,
	0xc9, 0xcf, 0xc9, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0x09, 0x14,
	0x81, 0x45, 0x94, 0x8c, 0xb8, 0xb8, 0x8a, 0x53, 0xf3, 0x8a, 0xf3, 0x8b, 0x5c, 0x12, 0x4b, 0x12,
	0x85, 0x84, 0xb8, 0x58, 0x40, 0xb4, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x98, 0x2d, 0x24,
	0xc0, 0xc5, 0xec, 0x9d, 0x5a, 0x29, 0xc1, 0x04, 0x16, 0x02, 0x31, 0x95, 0xb4, 0xb9, 0xf8, 0x8b,
	0x4b, 0x93, 0x93, 0x53, 0x8b, 0x8b, 0x83, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x24,
	0xb8, 0xd8, 0x83, 0x21, 0x42, 0x60, 0xbd, 0x1c, 0x41, 0x30, 0xae, 0x92, 0x3e, 0x17, 0x7b, 0x4e,
	0x7e, 0x3a, 0xf1, 0xa6, 0x1b, 0x4d, 0x60, 0xe4, 0x62, 0x73, 0xce, 0xcf, 0xcd, 0xcd, 0x2c, 0x11,
	0x72, 0xe7, 0x12, 0x80, 0xb0, 0x82, 0x11, 0x4e, 0x14, 0xd3, 0x43, 0xb8, 0x5e, 0x0f, 0xe1, 0x74,
	0x29, 0x69, 0x14, 0x71, 0x34, 0xe7, 0xd9, 0x72, 0x71, 0x42, 0x0c, 0xf2, 0xc9, 0x4f, 0x17, 0x12,
	0x46, 0x56, 0x09, 0x75, 0x1b, 0x5e, 0xed, 0x49, 0x6c, 0xe0, 0x70, 0x33, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xbc, 0xd1, 0x76, 0x3e, 0x4a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommitClient is the client API for Commit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommitClient interface {
	CommitSensorData(ctx context.Context, in *SensorData, opts ...grpc.CallOption) (*SuccessResponse, error)
	CommitLog(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type commitClient struct {
	cc *grpc.ClientConn
}

func NewCommitClient(cc *grpc.ClientConn) CommitClient {
	return &commitClient{cc}
}

func (c *commitClient) CommitSensorData(ctx context.Context, in *SensorData, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/controller.Commit/CommitSensorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) CommitLog(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/controller.Commit/CommitLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitServer is the server API for Commit service.
type CommitServer interface {
	CommitSensorData(context.Context, *SensorData) (*SuccessResponse, error)
	CommitLog(context.Context, *LogData) (*SuccessResponse, error)
}

func RegisterCommitServer(s *grpc.Server, srv CommitServer) {
	s.RegisterService(&_Commit_serviceDesc, srv)
}

func _Commit_CommitSensorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).CommitSensorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Commit/CommitSensorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).CommitSensorData(ctx, req.(*SensorData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_CommitLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).CommitLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Commit/CommitLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).CommitLog(ctx, req.(*LogData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Commit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.Commit",
	HandlerType: (*CommitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommitSensorData",
			Handler:    _Commit_CommitSensorData_Handler,
		},
		{
			MethodName: "CommitLog",
			Handler:    _Commit_CommitLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contoller.proto",
}
